// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// because PlanetScale does not support foreign key constraints and 
// Prisma defautls to using foreign keys to express relations,
// we need to set this "referentialIntegrity" property 
// when using Prisma with PlanetScale

// “Referential integrity is a property of a data set that states 
// that all its references are valid. Referential integrity requires 
// that if one record references another, then the referenced record 
// must exist. For example, if a Post model defines an author, then 
// the author must also exist.“ 

enum Auth {
  user
  admin
  kitchen
  bar
}

model Department {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[] // many roles can belong to one department
}

model Role {
  id           String     @id @default(cuid())
  name         String
  description  String
  department   Department @relation(fields: [departmentId], references: [id]) // a role can only belong to one department
  departmentId String
  created      DateTime   @default(now())
  modified     DateTime   @updatedAt
  tasks        Task[] // Many-to-one relationship
  users        User[] // Many-to-many relationship
}

model User {
  id              String         @id @default(cuid())
  firstName       String
  lastName        String
  alias           String
  password        String         @unique
  auth            String         @default("user")
  roles           Role[] // many roles can belong to one user
  locked          Boolean        @default(false)
  juiceRequested  JuiceRequest[] @relation("UserOnRequest")
  juiceFullfilled JuiceRequest[] @relation("UserOnFullfilled")

  @@unique([firstName, lastName, password])
}

model Task {
  id           String   @id @default(cuid())
  name         String
  description  String
  createdAt    DateTime @default(now())
  lastEdited   DateTime @updatedAt
  priority     Int
  assignedTo   Role     @relation(fields: [assignedToId], references: [id]) // a task can only be assigned to one role
  assignedToId String
}

model Day {
  id             String   @id @default(cuid())
  startingCovers Int
  endingCovers   Int
  date           DateTime @default(now())
  totalSales     Int
  totalTips      Int
  weather        String
  notes          String
}

model Priority {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
}

model JuiceRequest {
  id                String   @id @default(cuid())
  requestFrom       User     @relation(name: "UserOnRequest", fields: [requestFromId], references: [id])
  requestFromId     String
  limeAmount        Float
  lemonAmount       Float
  orangeAmount      Float
  grapefruitAmount  Float
  notes             String
  createdAt         DateTime @default(now())
  lastEdited        DateTime @updatedAt
  requestFullfilled Boolean  @default(false)
  fullfilledBy      User     @relation(name: "UserOnFullfilled", fields: [fullfilledById], references: [id])
  fullfilledById    String
}
