// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// because PlanetScale does not support foreign key constraints and 
// Prisma defautls to using foreign keys to express relations,
// we need to set this "referentialIntegrity" property 
// when using Prisma with PlanetScale

// “Referential integrity is a property of a data set that states 
// that all its references are valid. Referential integrity requires 
// that if one record references another, then the referenced record 
// must exist. For example, if a Post model defines an author, then 
// the author must also exist.“ 

enum Auth { // enum is a type that can be one of several possible values
  user
  admin
  kitchen
  bar
}

enum TaskStatus {
  todo
  inProgress
  done
}

model Department {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[] // many roles can belong to one department

}

model Role {
  id             String   @id @default(cuid())
  name           String
  description    String
  department     Department @relation(fields: [departmentId], references: [id]) // a role can only belong to one department
  departmentId  String
  created     DateTime @default(now())
  modified DateTime @updatedAt
  tasks          Task[] // many tasks can belong to one role
  users          User[] // many users can have the same role
}

model User {
  id            String   @id @default(cuid())
  firstName    String
  lastName     String
  alias         String
  password      String @unique
  auth          String @default("user")
  roles         Role[] // many roles can belong to one user

  @@unique([firstName, lastName, password])
}

model TaskPriority { // this is a lookup table
  id            String   @id @default(cuid())
  name          String
  description   String
  tasks         Task[] // many tasks can have the same priority
}

model Task {
  id             String   @id @default(cuid())
  name          String
  description    String
  createdAt     DateTime @default(now())
  lastEdited DateTime @updatedAt
  priority       TaskPriority @relation(fields: [taskPriorityId], references: [id])
  taskPriorityId String // this is the foreign key
  assignedTo    Role @relation(fields: [roleId], references: [id]) // a task can only be assigned to one role
  roleId         String // this is the foreign key
  status         String @default("user")  // a task can only have one status
}

model Day {
  id              String   @id @default(cuid())
  startingCovers Int
  endingCovers   Int
  date            DateTime @default(now())
  totalSales     Int
  totalTips      Int
  weather         String
  notes           String
}



